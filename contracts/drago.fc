#include "stdlib.fc";

;; Storage variables
global int total_supply;      ;; Total token supply
global int token_balance;     ;; Available tokens for sale
const int TOKEN_PRICE = 10000000; ;; 0.01 TON in nanotons

;; Error codes
const int ERROR_INSUFFICIENT_FUNDS = 101;
const int ERROR_INSUFFICIENT_TOKENS = 102;

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    ;; Initialize if first time
    if (total_supply == 0) {
        total_supply = 1000000;  ;; 1,000,000 tokens
        token_balance = total_supply;
        return ();
    }

    ;; Process purchase
    throw_unless(ERROR_INSUFFICIENT_FUNDS, msg_value >= TOKEN_PRICE);
    throw_unless(ERROR_INSUFFICIENT_TOKENS, token_balance > 0);
    
    token_balance -= 1;  ;; Sell 1 token
    
    ;; Send token to buyer
    slice sender_address = in_msg_full.begin_parse().skip_bits(4).load_msg_addr();
    send_raw_message(begin_cell()
        .store_uint(0x18, 6)
        .store_slice(sender_address)
        .store_coins(0)
        .store_uint(0x4, 1 + 4 + 4 + 64 + 32 + 1 + 1)
        .store_ref(begin_cell()
            .store_uint(0x7362d09c, 32)  ;; Transfer notification
            .store_uint(1, 64)           ;; 1 token
            .end_cell())
        .end_cell(), 64);
}

;; Get methods
int get_token_balance() method_id {
    return token_balance;
}

int get_total_supply() method_id {
    return total_supply;
}

int get_token_price() method_id {
    return TOKEN_PRICE;
}